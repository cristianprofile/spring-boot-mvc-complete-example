buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        // get spring platform dependencies plugin
        classpath "io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE"
        // get spring boot gradle  to be able to  run war with task "gradle bootRun"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.4.1.RELEASE")
        // get gradle dependency analyzdsefsdgsfdsfsfe This plugin attempts to replicate the functionality of the maven dependency plugin's analyze
        // goals which fail the build if dependencies are declared but not used or used but not declared.
        classpath 'ca.cutterslade.gradle:gradle-dependency-analyze:1.0.3'
    }
}

plugins {
    //git commit plugin to be able to create git.properties file and info for Spring boot actuator endpoint
    id "com.gorylenko.gradle-git-properties" version "1.4.17"
}

allprojects {
    group = 'com.mylab.cromero'
    version = '1.0.0-SNAPSHOT'


    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'
    apply plugin: 'ca.cutterslade.analyze'
    apply plugin: 'jacoco'
    apply plugin: 'idea'
    apply plugin: "com.gorylenko.gradle-git-properties"

    //config git.properties time-zone and date format
    gitProperties {
        dateFormat = "yyyy-MM-dd'T'HH:mmZ"
        dateFormatTimeZone = "Europe/Madrid"
    }




/*CREATE NEW INTEGRATION TEST SOURCESET
(thanks to Petri Kainulainen post support url: https://www.petrikainulainen.net/programming/gradle/getting-started-with-gradle-integration-testing/ )
    **************************************************************
    ***************************************************************/

    /*   Add new source and resource directories to our Gradle build. Created a new source set, the Java plugin added two new dependency configurations to our build:

       - The integrationTestCompile configuration is used to declare the dependencies that are required when our integration tests are compiled.
       - The integrationTestRuntime configuration is used to declare the dependencies that are required to run our integration tests. This configuration contains all dependencies that are added to the integrationTestCompile configuration.
    */

    sourceSets {
        integrationTest {
            java {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/integration-test/java')
            }
            resources.srcDir file('src/integration-test/resources')
        }
    }

//    contain the dependencies of our unit tests in our Integration Test

    configurations {
        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime
    }

/*    Creat the task that runs our integration tests:

    - Create a new task called integrationTest and set its type to Test.
    - Configure the location of the compiled test classes.
    - Configure the classpath that is used when our integration tests are run.*/

    task integrationTest(type: Test) {
        testClassesDir = sourceSets.integrationTest.output.classesDir
        classpath = sourceSets.integrationTest.runtimeClasspath
    }




//    We define diferent html report destination for unit and integration test
    tasks.withType(Test) {
        reports.html.destination = file("${reporting.baseDir}/${name}")

    }

//    Add integration test folder to intellij Ide

    idea {
        module {
            testSourceDirs += file('src/integration-test/java')
            testSourceDirs += file('src/integration-test/resources')
        }
    }

/*    END CREATE NEW INTEGRATION TEST SOURCESET    *******************************
    **************************************************************
    ***************************************************************/


    task wrapper(type: Wrapper) {
        gradleVersion = '3.0'
    }


}

subprojects {

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencyManagement {
        imports {
            //import maven bom to use Spring Platform --> versions of dependecies will be managed by Spring
            mavenBom "io.spring.platform:platform-bom:Athens-SR3"
        }
    }

    //configure task properties of gradle-dependency-analyze
    analyzeTestClassesDependencies {
        justWarn = true
    }

    //configure task properties of gradle-dependency-analyze
    analyzeClassesDependencies {
        justWarn = true
    }




    jar {
        manifest {
            attributes 'Implementation-Title': 'Spring boot multimodules POC with Java 8',
                    'Implementation-Version': version
        }
    }

    dependencies {
        //every module needs this dependency
        testCompile "org.springframework.boot:spring-boot-starter-test"

    }




}

// S U B P R O J E C T S

project(':mylab-core:mylab-core-repository') {

    dependencies {

        compile 'org.springframework.boot:spring-boot-starter-data-jpa'
        compile 'org.apache.commons:commons-lang3'
        compile 'javax.validation:validation-api'

        testCompile 'org.hibernate:hibernate-validator'
        testCompile 'javax.el:javax.el-api'
        testCompile 'org.hsqldb:hsqldb'

    }



    project(':mylab-core:mylab-core-service-impl') {

        dependencies {
            compile project(':mylab-core:mylab-core-repository')
            compile project(':mylab-core:mylab-core-service-api')

            compile 'org.hamcrest:hamcrest-library'

            testCompile 'org.hsqldb:hsqldb'
            testCompile 'org.hibernate:hibernate-validator'
            testCompile 'javax.el:javax.el-api'
            testCompile 'org.powermock:powermock-api-mockito:1.6.5'
            testCompile 'org.powermock:powermock-module-junit4:1.6.5'


        }

        project(':mylab-core:mylab-core-service-security-impl') {
            dependencies {
                compile project(':mylab-core:mylab-core-repository')
                compile project(':mylab-core:mylab-core-service-api')
                compile 'org.springframework.security:spring-security-core'
            }
        }

    }

    project(':mylab-core:mylab-core-service-api') {

        dependencies {


        }
    }


    project(':spring-boot-mvc-rest') {


        apply plugin: 'spring-boot'
        apply plugin: 'war'

        dependencies {

            compile project(':mylab-core:mylab-core-service-impl')

            compile 'org.springframework.boot:spring-boot-starter-web'
            compile 'org.springframework.boot:spring-boot-starter-actuator'
            compile("org.springframework.boot:spring-boot-starter-remote-shell")
            compile 'org.hsqldb:hsqldb'
            compile("org.springframework.boot:spring-boot-devtools")
            //needed to be able to run logback
            compile 'net.logstash.logback:logstash-logback-encoder:4.7'
            compile("ch.qos.logback:logback-classic:1.5.3")
            compile("ch.qos.logback:logback-core:1.1.6")

            testCompile 'com.jayway.jsonpath:json-path'
            testCompile 'org.springframework.boot:spring-boot-starter-test'


        }

        //needed to set spring profile when gradle bootRun is called
        bootRun {
            systemProperties System.properties
        }


    }


    project(':spring-boot-data-rest') {

        apply plugin: 'spring-boot'
        apply plugin: 'war'

        dependencies {

            compile project(':mylab-core:mylab-core-repository')
            compile project(':mylab-core:mylab-core-service-api')

            compile 'org.springframework.boot:spring-boot-starter-data-rest'
            compile("org.springframework.boot:spring-boot-devtools")
            compile 'org.springframework.data:spring-data-rest-hal-browser'
            compile 'org.springframework.boot:spring-boot-starter-actuator'
            compile("org.springframework.boot:spring-boot-starter-remote-shell")
            compile 'org.hsqldb:hsqldb'
            //needed to be able to run logback
            compile 'net.logstash.logback:logstash-logback-encoder:4.7'
            compile("ch.qos.logback:logback-classic:1.5.3")
            compile("ch.qos.logback:logback-core:1.1.6")

            testCompile 'com.jayway.jsonpath:json-path'

        }

        bootRun {
            systemProperties System.properties
        }
    }

    project(':spring-boot-mvc-web') {


        apply plugin: 'spring-boot'
        apply plugin: 'war'

        dependencies {


            compile project(':mylab-core:mylab-core-service-impl')
            compile project(':mylab-core:mylab-core-service-security-impl')

            compile 'org.springframework.boot:spring-boot-starter-web'
            compile 'org.springframework.boot:spring-boot-starter-actuator'
            compile 'org.springframework.boot:spring-boot-starter-security'
            compile("org.springframework.boot:spring-boot-devtools")
            compile("org.springframework.boot:spring-boot-starter-remote-shell")
            runtime 'org.hsqldb:hsqldb'
            compile 'org.apache.tiles:tiles-jsp'
            compile 'org.springframework.security:spring-security-taglibs'
            compile("javax.servlet:jstl:1.2")
            //needed to be able to run logback
            compile 'net.logstash.logback:logstash-logback-encoder:4.7'
            compile("ch.qos.logback:logback-classic:1.5.3")
            compile("ch.qos.logback:logback-core:1.1.6")
            providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
            providedRuntime 'org.apache.tomcat.embed:tomcat-embed-jasper'



        }

        bootRun {
            systemProperties System.properties
        }


    }


}
